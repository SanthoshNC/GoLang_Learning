Day 1:

Introduction about GO
Installation and verification of GO

Hello World Program in GO

https://pkg.go.dev/ - website to get the modules

import - to import the modules

go mod init <<module path name >> // go mod init example.com/hello

go mod tidy // Add or remove packages

go run . 

Files:

go.mod
go.sum


=================

Day 2:

Intro to packages
Intro to modules

go mod init example.com/greetings

Exported Name:  func Hello(name string) string

:=  declaring and initializing a variable

Sprintf() function

==============

Day 3:

Intro to call code from another module

go mod edit -- to mention the module present locally

replace directive in go.mod file

pseudo-version number -- a generated number used in place of a semantic version number

go run (.)

==============

Day 4:

Return and handle an error

import "errors" - package to import to handle errors

errors.New("empty name") - Our own error message

import "log" - package for logging

  log.SetPrefix("greetings: ") - Set properties of the predefined Logger, including the log entry prefix
  log.SetFlags(0) - a flag to disable printing the time, source file, and line number.

log.Fatal(err) - print the error and stop the program

==============

Day 5:

Return a random greeting

import "math/rand" - package to import to rand function

import "time" - package to import to time function

randomFormat() - name starts with LowerCase - not exported

[]string - dynamic declaration

init() - executes automatically like a construcctor

------

Return greetings for multiple people

map[key-type]value-type: syntax for map

make() - to assign map to a variable

_(an underscore) - Go blank identifier

range - returns two values 

1. index of the current item in the loop
2. copy of the item's value

===============

Day 6

Add a test

filename: <<name>>_test.go eg: greetings_test.go

import (
    "testing" - package to import to testing function
    "regexp"  - package to import to regex function
)

Test function names: Test<<Name>>  - Name says something about the specific test 
eg: TestHelloName(t *testing.T)  - pointer to the testing package's testing.T type

fatalF - print a message to the console and end execution

go test - executes test functions (whose names begin with Test) in test files (whose names end with _test.go).

go test -v - verbose output that lists all of the tests and their results

===============

go build - compiles only (creates executable file)

go install - compiles and installs the package in the GOBIN path

go list -f '{{.Target}}' - finds the install path

go env -w GOBIN=<<path>> eg: go env -w GOBIN=C:\path\to\your\bin
